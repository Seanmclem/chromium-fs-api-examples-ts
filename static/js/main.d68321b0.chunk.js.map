{"version":3,"sources":["pages/FourOhFour.tsx","pages/ShowDirectoryPicker.tsx","pages/Layout.tsx","components/directoryContents/components/folderItem/components/folderIcon/FolderIcon.tsx","utils/file-system-utils.ts","components/directoryContents/components/folderItem/components/childItems/ChildItems.tsx","components/directoryContents/enums.ts","stores/selectedStore.tsx","components/directoryContents/components/folderItem/FolderItem.tsx","components/directoryContents/components/fileItem/components/fileIcon/FileIcon.jsx","components/directoryContents/components/fileItem/FileItem.tsx","components/directoryContents/components/fileOrFolderList/FileOrFolderList.tsx","components/directoryContents/components/HideDrawerBtn.tsx","components/directoryContents/components/ActionsBar.tsx","components/directoryContents/DirectoryContents.tsx","utils/filetype-utils.ts","components/FileViewers/ImageFileViewer.tsx","components/FileViewers/TextFileViewer.tsx","components/FileViewers/VideoFileViewer.tsx","components/FileViewerByType.tsx","components/FileMenu.tsx","components/ModalReady.tsx","components/FolderContextMenu.tsx","components/TextInput.tsx","components/FormBox.tsx","components/SubmitButton.tsx","components/modals/DirectoryCreator.tsx","components/modals/FileCreator.tsx","components/FileContextMenu.tsx","projects/FileExplorer.tsx","App.tsx","reportWebVitals.ts","index.tsx","../node_modules/typescript/lib sync"],"names":["FourOhFour","FileContents","value","useEffect","setText","useState","text","name","rows","cols","getTextFileContents","fileHandle","a","getFile","file","fileText","writeFile","contents","createWritable","writer","truncate","write","close","ShowDirectoryPicker","undefined","setFileHandle","fileTextToState","handleOpenFile","window","showOpenFilePicker","handles","length","handleAddComponent","newText","replace","newFileHandle","className","onClick","Layout","children","useQueryParams","FolderIcon","open","size","asyncIteratorToArray","iterator","sort","array","handle","push","comparator","b","createFileInDirectory","directoryHandle","filename","getFileHandle","create","createDirectory","directoryName","getDirectoryHandle","getDirectoryContents","handlesEntriesIterator","entries","getFileBlobUrl","url","URL","createObjectURL","getVideoData","type","blobUrl","data","ChildItemsContainer","styled","div","ChildItems","parent","show","handleSelectFile","dirPath","folderContentsHandles","setFolderContentsHandles","refreshInludedFiles","filesOrFoldersHandles","map","entry","FOLDER_MENU_ID","FILE_MENU_ID","useTodoStore","set","selectedFolder","contextHighlightedFolder","setContextHighlightFolder","folder","_state","setSelectedFolder","FolderItem","folderHandle","setOpen","specificPath","depth","split","showContextMenu","useContextMenu","id","state","contextHighlightFolder","console","log","path","data-path","style","paddingLeft","paddingRight","onContextMenu","event","props","FileIcon","src","getIconForFile","alt","FileItem","FileOrFolderList","kind","CloseButton","HideDrawerBtn","ActionsBarContainer","ActionsBar","rootHandle","setupFileSystem","cursor","DirectoryContents","altRootHandle","setRootHandle","directoryContents","setDirectoryContents","drawerOpen","setDrawerOpen","showFolderPicker","showDirectoryPicker","position","top","zIndex","imageExtentions","videoExtentions","getFileExtensionFromHandle","extension","ext","getExtension","includes","Contianer","ImageFileViewer","setUrl","fileToUrlState","urlResult","height","width","TextFileViewer","test","ts","createSourceFile","ScriptTarget","JSON","VideoFileViewer","setData","dataResult","controls","FileViewerByType","FileMenuContainer","FileMenu","setAltRootHandle","menuButton","Actions","ModalBackdrop","ModalBody","ModalReady","onCloseModal","e","stopPropagation","preventDefault","TextInput","label","error","placeholder","stealFocus","onPressEnter","inputRef","useRef","current","focus","onChange","target","onKeyPress","key","ref","FormBox","SubmitButton","rest","DirectoryCreator","setCreateDirectoryModalOpen","setDirectoryName","handleCreateDirectory","FileCreator","setCreateFileModalOpen","fileNameText","setfileNameText","handleCreateFile","FolderContextMenu","setDirectoryHandle","createFileModalOpen","createDirectoryModalOpen","handleItemClick","triggerEvent","action","NewFolder","NewFile","onHidden","obj","disabled","FileContextMenu","EditAstTest","Properties","FileExplorerContainer","InnerStuffContainer","FileExplorer","selectedFile","setSelectedFile","handleSelectFileCustom","useCallback","customFileFn","routes","App","routeResult","useRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.d68321b0.chunk.js","sourcesContent":["import React from \"react\"\n\nexport const FourOhFour = () => {\n    return <div>Page not found</div>\n}","import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nconst FileContents = ({ value }: { value?: string }) => {\n    useEffect(() => {\n        if(value){\n            setText(value)\n        }\n    }, [value])\n\n    const [text, setText] = useState<string>(\"\");\n\n\n    return value ? (\n        <div>\n        <textarea\n            name=\"file\"\n            value={text}\n            rows={40}\n            cols={40}\n        />\n        </div>\n    ) : null;\n};\n\nconst getTextFileContents = async (fileHandle: FileSystemFileHandle) => {\n  const file: File = await fileHandle.getFile();\n  const fileText: string = await file.text();\n  return fileText;\n};\n\nexport const writeFile = async (\n    fileHandle: FileSystemFileHandle, \n    contents: FileSystemWriteChunkType\n) => {\n    const writer = await fileHandle.createWritable();\n    await writer.truncate(0);// Make sure we start with an empty file\n    await writer.write(contents);\n    await writer.close();\n    return fileHandle;\n}\n\nexport const ShowDirectoryPicker = () => {\n  const [text, setText] = useState<string>(\"\");\n  const [fileHandle, setFileHandle] = useState<\n    FileSystemFileHandle | undefined\n  >(undefined);\n\n  const fileTextToState = async (fileHandle: FileSystemFileHandle) => {\n    const fileText = await getTextFileContents(fileHandle);\n    setText(fileText);\n  };\n\n  const handleOpenFile = async () => {\n    const handles = await window.showOpenFilePicker();\n    if(handles?.length && handles[0]){\n        setFileHandle(handles[0]);\n        fileTextToState(handles[0]);\n    }\n  };\n\n  const handleAddComponent = async () => {\n    if(text && fileHandle){\n        let newText = text;\n        newText = text.replace(\"{/*PHRASE*/}\",`{/*PHRASE*/}\n<InjectedComponent/>`)\n        const newFileHandle = await writeFile(fileHandle, newText);\n        setFileHandle(newFileHandle);\n        fileTextToState(newFileHandle);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>File stuff</h1>\n      <button onClick={handleOpenFile}>Open File</button>\n      {fileHandle && <button onClick={handleAddComponent}>Add component, save file</button>}\n      <FileContents value={text} />\n    </div>\n  );\n}\n","import { useQueryParams } from 'hookrouter'\nimport React from 'react'\n\nconst pages: string[] = [\n    \"test\",\n    \"FileExplorer?hideLayout=true\"\n]\n\n\nexport const Layout = ({ children }: any) => {\n    const [params] = useQueryParams()\n\n    return (\n        <div className=\"layout\">\n            {/* {!params.hideLayout && (\n                <div className=\"heading\">\n                    <ul>\n                        <li>\n                            <a href=\"/\">Home</a>\n                        </li>\n                        {pages.map(page =>\n                            <li key={page}>\n                                <a href={`/${page}`}>{page.split(\"?\")[0]}</a>\n                            </li>\n                        )}\n                    </ul>\n                </div>\n            )} */}\n            {children}\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport './FolderIcon.scss'\nimport { MdKeyboardArrowRight } from \"react-icons/md\"\n\ninterface props {\n    open: boolean\n}\n\nexport const FolderIcon: React.FC<props> = ({open}) => {\n    return (\n        <div className={`icon-container${open ? ' open' : ''}`}>\n            <MdKeyboardArrowRight size=\"20px\" />\n        </div>\n    )\n}\n","export type EntryType = [string, FileSystemHandle]\n\nconst asyncIteratorToArray = async (iterator: any, sort?: boolean) => { // verified\n    const array = []\n    for await (const handle of iterator) {\n        array.push(handle)\n    }\n\n    // console.log({array})\n    sort && array.sort(comparator)\n    return array\n}\n\nfunction comparator(a: string, b: string) {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n}\n// https://stackoverflow.com/questions/5435228/sort-an-array-with-arrays-in-it-by-string/5435341\n\nexport const createFileInDirectory = async (\n    directoryHandle: FileSystemDirectoryHandle,\n    filename: string\n) => {\n    const fileHandle = await directoryHandle.getFileHandle(filename, { create: true})\n    await writeFile(fileHandle, \" \")\n    return fileHandle\n}  // Can only save with a space\n\nexport const createDirectory = async (    \n    directoryHandle: FileSystemDirectoryHandle,\n    directoryName: string\n) => await directoryHandle.getDirectoryHandle(directoryName, { create: true }) // UNverified\n\n// UNverified\nexport const writeFile = async (\n    fileHandle: FileSystemFileHandle, \n    contents: FileSystemWriteChunkType // is it? Dafuq is that\n) => {\n    const writer = await fileHandle.createWritable();\n    await writer.truncate(0);// Make sure we start with an empty file\n    await writer.write(contents);\n    await writer.close();\n}\n\nexport const openTextFile = async () => { // dafuq test // or create?\n    // https://wicg.github.io/file-system-access/#api-filpickeroptions-types\n    const options: OpenFilePickerOptions = {\n        types: [{\n            description: 'Text Files',\n            accept: {\n                'text/plain': ['.txt', '.text'],\n                'text/html': ['.html', '.htm']\n            }\n        }],\n        multiple: false\n    };\n    return window.showOpenFilePicker(options)\n}\n \n// Verified\nexport const getDirectoryContents = async (directoryHandle:FileSystemDirectoryHandle, sort = true): Promise<EntryType[]>  => {\n    const handlesEntriesIterator = directoryHandle.entries()\n    return asyncIteratorToArray(handlesEntriesIterator, sort)\n}\n\n// Files\nexport const getTextFileContents = async (fileHandle: FileSystemFileHandle) => {\n    const file: File = await fileHandle.getFile()\n    const fileText: string = await file.text()\n    return fileText\n}\n\nexport const getFileBlobUrl = async (fileHandle: FileSystemFileHandle) => {\n    const file: File = await fileHandle.getFile()\n    let url = URL.createObjectURL(file)\n\n    return url\n}\n\nexport interface VideoData {\n    blobUrl: string;\n    type: string;\n    name: string;\n}\n\nexport const getVideoData = async (fileHandle: FileSystemFileHandle): Promise<VideoData> => {\n    const file: File = await fileHandle.getFile()\n    const type: string = await file.type\n    let blobUrl = URL.createObjectURL(file)\n\n    const data: VideoData = {\n        blobUrl,\n        type,\n        name: file.name\n    }\n    return data\n}","import React, { useEffect, useState } from 'react'\nimport { FileOrFolderList } from '../../../fileOrFolderList/FileOrFolderList'\nimport { EntryType, getDirectoryContents } from '../../../../../../utils/file-system-utils'\nimport styled from 'styled-components'\n\nconst ChildItemsContainer = styled.div`\n`\n\ninterface Props {\n    parent: FileSystemDirectoryHandle,\n    show: boolean,\n    handleSelectFile?: any,\n    dirPath?: string,\n}\n\nexport const ChildItems: React.FC<Props> = ({ parent, show, handleSelectFile, dirPath }) => {\n    const [folderContentsHandles, setFolderContentsHandles] = useState<EntryType[]>([])\n\n    useEffect(() => {\n        refreshInludedFiles(parent)\n    }, [parent, show])\n\n    const refreshInludedFiles = async (handle: FileSystemDirectoryHandle) => {\n        const filesOrFoldersHandles: EntryType[] = await getDirectoryContents(handle)\n        setFolderContentsHandles(filesOrFoldersHandles)\n    }\n    if (show && folderContentsHandles.length) {\n        return (\n            <ChildItemsContainer>\n                {folderContentsHandles.map((entry: EntryType) => (\n                    <FileOrFolderList\n                        dirPath={dirPath}\n                        key={entry[0]}\n                        entry={entry[1]}\n                        handleSelectFile={handleSelectFile}\n                    />\n                ))}\n            </ChildItemsContainer>\n        )\n    } else {\n        return null\n    }\n\n}\n","export const FOLDER_MENU_ID = \"folder-menu-id\";\nexport const FILE_MENU_ID = \"file-menu-id\";","import create, { SetState } from \"zustand\";\n\nexport interface SelectedFolder {\n    path: string;\n    folderHandle: FileSystemDirectoryHandle;\n}\n\ntype ISet = {\n    selectedFolder?: SelectedFolder;\n    contextHighlightedFolder?: SelectedFolder;\n    setContextHighlightFolder: (selectedFolder?: SelectedFolder) => void;\n    setSelectedFolder: (selectedFolder?: SelectedFolder) => void;\n}\n\nexport const useTodoStore = create<ISet>((set: SetState<ISet>) => ({\n    selectedFolder: undefined,\n    contextHighlightedFolder:undefined,\n    setContextHighlightFolder: (folder?: SelectedFolder) => set((_state: ISet) => ({contextHighlightedFolder: folder})),\n    setSelectedFolder: (folder?: SelectedFolder) => set((_state: ISet) => ({selectedFolder: folder})),\n\n\n    // addToTodoList: (toAdd: SelectedFolder) => set((state: ISet) => ({ todoList: [...state.todoList, toAdd] })),\n    // removeToDoListItem: (idToRemove: number) => set((state: ISet) => {\n    //     let newArray = [...state.todoList];\n    //     newArray.splice(idToRemove, 1);\n    //     return { todoList: [...newArray] };\n    // }),\n    // markDoneToDoListItem: (idToToggleDone: number) => set((state: ISet) => {\n    //     let newArray = [...state.todoList];\n    //     newArray[idToToggleDone].done = !newArray[idToToggleDone].done;\n    //     return { todoList: [...newArray] };\n    // }),\n}))","import React, { useEffect, useState } from 'react'\nimport './FolderItem.scss'\nimport { FolderIcon } from './components/folderIcon/FolderIcon'\nimport { ChildItems } from './components/childItems/ChildItems'\nimport { useContextMenu } from 'react-contexify'\nimport { FOLDER_MENU_ID } from '../../enums'\n\nimport { useTodoStore } from '../../../../stores/selectedStore';\n\n\ninterface Props {\n    entry: FileSystemDirectoryHandle,\n    handleSelectFile?: any,\n    dirPath?: string\n}\n\nexport const FolderItem: React.FC<Props> = ({ entry: folderHandle, handleSelectFile, dirPath }) => {\n    const [open, setOpen] = useState(false)\n\n    const [specificPath] = useState(`${dirPath}/${folderHandle.name}`)\n    const depth = (dirPath?.split(\"/\").length || 0) - 1 || 0;  \n\n    const { show: showContextMenu } = useContextMenu({ id: FOLDER_MENU_ID });\n    const setContextHighlightFolder = useTodoStore(state => state.setContextHighlightFolder)\n    const contextHighlightFolder = useTodoStore(state => state.contextHighlightedFolder)\n\n    useEffect(()=>console.log('rerender'))\n\n    const handleRigthClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        showContextMenu(event, {id: FOLDER_MENU_ID, props: {folderHandle}})\n        setContextHighlightFolder({path: specificPath, folderHandle})\n        // just use rxjs at some point\n    }\n\n    return (\n        <div className=\"folder-item-conatiner\">\n            <div\n                className={`folder-item ${contextHighlightFolder?.path === specificPath ? 'context-click' : ''}`}\n                data-path={specificPath}\n                key={folderHandle.name} onClick={() => setOpen(!open)}\n                style={{\n                    paddingLeft: `${depth * 15}px`,\n                    paddingRight: `${depth * 15}px`,\n                }}\n                onContextMenu={handleRigthClick}\n            >\n                <FolderIcon open={open} />\n                <div className=\"folder-name-button\">\n                    <div>{folderHandle.name}</div>\n                </div>\n            </div>\n\n            <ChildItems\n                parent={folderHandle}\n                show={open}\n                handleSelectFile={handleSelectFile}\n                dirPath={`${dirPath}/${folderHandle.name}`}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport './FileIcon.scss'\nimport { getIconForFile } from 'vscode-icons-js'\n// import { getIconForFile } from '/'\nexport const FileIcon = ({ filename }) => {\n    return (\n        <div className={`file-icon-container`}>\n            <img src={`./assets/icons/${getIconForFile(filename)}`}\n                alt=\"file\"></img>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport './FileItem.scss'\nimport { FileIcon } from './components/fileIcon/FileIcon'\nimport { useContextMenu } from 'react-contexify'\nimport { FILE_MENU_ID } from '../../enums'\n\ninterface Props {\n    entry:FileSystemFileHandle, \n    handleSelectFile?: any,\n    dirPath?: string\n}\n\nexport const FileItem: React.FC<Props> = ({ entry: fileHandle, handleSelectFile, dirPath }) => {\n    const [specificPath] = useState(`${dirPath}/${fileHandle.name}`)\n    const depth = (dirPath?.split(\"/\").length || 0) - 1 || 0;  \n\n    const { show: showContextMenu } = useContextMenu({ id: FILE_MENU_ID });\n    const handleRigthClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        showContextMenu(event, {id: FILE_MENU_ID, props: {fileHandle}})\n        // setContextHighlightFolder({path: specificPath, folderHandle})\n        // just use rxjs at some point\n    }\n\n    console.log(fileHandle.name,specificPath)\n    const handleSelectFileDefault = (file:FileSystemFileHandle) => {\n        console.log({file})\n    }\n\n    return (\n        <div className=\"file-item\"\n            key={fileHandle.name}\n            onClick={() => handleSelectFile ? handleSelectFile(fileHandle) : handleSelectFileDefault(fileHandle)}\n            style={{\n                paddingLeft: `${depth * 15}px`,\n                paddingRight: `${depth * 15}px`\n            }}\n            onContextMenu={handleRigthClick}\n        >\n            <FileIcon filename={fileHandle.name} />\n            <div>{fileHandle.name}</div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './FileOrFolderList.scss'\nimport { FolderItem } from '../folderItem/FolderItem'\nimport { FileItem } from '../fileItem/FileItem'\n\ninterface Props {\n    entry: FileSystemHandle,\n    handleSelectFile? : any,\n    dirPath?: string\n}\n\nexport const FileOrFolderList: React.FC<Props> = ({ entry, handleSelectFile, dirPath }) => {\n    if (entry.kind === \"directory\") {\n        return (\n            <FolderItem \n                entry={entry}\n                handleSelectFile={handleSelectFile}\n                dirPath={dirPath}\n            />\n        )\n    } else {\n        return (\n            <FileItem\n                entry={entry}\n                handleSelectFile={handleSelectFile}\n                dirPath={dirPath}\n            />\n        )\n    }\n}\n","import React from 'react'\nimport { MdKeyboardArrowLeft } from 'react-icons/md'\nimport styled from 'styled-components'\n\nconst CloseButton = styled.div`\n    position: absolute;\n    right: -20px;\n    top: 48%;\n    z-index: 10;\n`\n\nexport const HideDrawerBtn: React.FC<any> = ({onClick}) => {\n\n    return (\n        <CloseButton onClick={onClick}>\n            <MdKeyboardArrowLeft size=\"20px\" />\n        </CloseButton>\n    )\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { MdRefresh } from 'react-icons/md'\n\nconst ActionsBarContainer = styled.div`\n    width: auto;\n    height: 25px;\n    background-color: lightgray;\n\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: 0 10px;\n`\n\nexport const ActionsBar = ({rootHandle, setupFileSystem}:any) => {\n\n    const handleRefreshRoot = () => {\n        setupFileSystem(rootHandle)\n    }\n\n    return (\n        <ActionsBarContainer>\n            <MdRefresh size=\"20px\" style={{cursor: 'pointer'}} onClick={handleRefreshRoot}/>\n        </ActionsBarContainer>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport './DirectoryContents.scss'\nimport { FileOrFolderList } from './components/fileOrFolderList/FileOrFolderList'\nimport { EntryType, getDirectoryContents } from '../../utils/file-system-utils'\nimport { HideDrawerBtn } from './components/HideDrawerBtn'\nimport { MdKeyboardArrowRight } from 'react-icons/md'\nimport { ActionsBar } from './components/ActionsBar'\n\ninterface Props {\n    handleSelectFile? : any;\n    altRootHandle?: FileSystemDirectoryHandle;\n}\n\n//rename to FileBrowserSidebar\n\nexport const DirectoryContents: React.FC<Props> = ({ handleSelectFile, altRootHandle }) => {\n    const [rootHandle, setRootHandle] = useState<FileSystemDirectoryHandle| undefined>(undefined)\n    const [directoryContents, setDirectoryContents] = useState<EntryType[]>([])\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(true)\n\n    useEffect(() => {altRootHandle && setupFileSystem(altRootHandle)}, [altRootHandle])\n\n    const showFolderPicker = async () => {\n        const handle = await window.showDirectoryPicker()\n        setupFileSystem(handle)\n    }\n\n    const setupFileSystem = async (handle: FileSystemDirectoryHandle) => {\n        const contents = await getDirectoryContents(handle)\n        setRootHandle(handle)\n        setDirectoryContents(contents)\n    }\n\n    if (!rootHandle || !directoryContents) {\n        return (\n            <div className=\"main-folder-list-container\">\n                <div className=\"main-folder-list no-contents\">\n                    <p>No Folder Selected</p>\n                    <button onClick={showFolderPicker}>\n                        Select Root Folder\n                    </button>\n                </div>\n            </div>\n        )\n    } else if (directoryContents.length === 0) {\n        return (\n            <div className=\"main-folder-list-container\">\n                <div className=\"main-folder-list no-contents\">\n                    <p>Folder Empty</p>\n                    <button onClick={showFolderPicker}>\n                        Select Root Folder\n                    </button>\n                </div>\n            </div>\n        )\n    } else {\n        return (rootHandle ? (\n            <>\n                {!drawerOpen && (\n                    <MdKeyboardArrowRight style={{position: 'absolute', top: '48%', zIndex: 10}}  onClick={() => setDrawerOpen(!drawerOpen)} />\n                )}  \n                <div className={`main-folder-list-container ${!drawerOpen ? `closed` : ''}`}>\n                    {drawerOpen && (\n                        <HideDrawerBtn onClick={() => setDrawerOpen(!drawerOpen)} />\n                    )}\n                    <div className=\"main-folder-list\">\n                        <div className=\"folder-name\">'{rootHandle.name}' Contents:</div>\n                        <ActionsBar rootHandle={rootHandle} setupFileSystem={setupFileSystem} />\n                        {directoryContents.map(entry => (\n                            <FileOrFolderList\n                                key={entry[0]}\n                                entry={entry[1]}\n                                handleSelectFile={handleSelectFile}\n                                dirPath={rootHandle.name}\n                            />\n                        ))}\n                    </div>\n                </div>            \n            </>\n\n        ) : (\n            <div>No folder selected</div>\n        ))\n    }\n}","// const typeCategories: string[] = ['image', 'video', 'text']\nconst imageExtentions: string[] = ['png', 'jpeg', 'jpg', 'bmp', 'gif', 'webp', 'svg', 'ico']\nconst videoExtentions: string[] = ['mov', 'mp4', 'mpeg', 'mpg', 'webm', 'mkv', 'avi', 'gifv' ]\n\nexport const getFileTypeByExtension = (extension: string): 'image' | 'video' | 'text' => {\n    if(imageExtentions.includes(extension)) \n    {\n        return 'image'\n    }\n    else if (videoExtentions.includes(extension)){\n        return 'video'\n    }\n    else {\n        return 'text'\n    }\n}\n\nexport const getExtension = (fileHandle: FileSystemFileHandle) => {\n    const array = fileHandle.name.split('.')\n    const lastItem = array[array.length - 1]\n    return lastItem\n}\n\nexport const getFileExtensionFromHandle = (fileHandle: FileSystemFileHandle) => {\n    const ext = getExtension(fileHandle)\n    const type = getFileTypeByExtension(ext)\n    return type\n}","import React, { useEffect, useState } from \"react\"\nimport styled from \"styled-components\"\nimport { getFileBlobUrl } from \"../../utils/file-system-utils\";\n\nconst Contianer = styled.div`\n    /* display: flex;\n    justify-content: center;\n    align-items: center; */\n    padding: 10% 0 0 10%;\n\n    width: 100%;\n    height: auto;\n    \n    border: 1px solid black;\n    border-radius: 10px;\n`\n\ninterface props {\n    fileHandle: FileSystemFileHandle;\n}\n\nexport const ImageFileViewer: React.FC<props> = ({fileHandle}) => {\n    const [url, setUrl] = useState<string>('')\n\n    useEffect(() => {\n        fileToUrlState(fileHandle)\n    }, [fileHandle])\n\n    const fileToUrlState = async (fileHandle: FileSystemFileHandle) => {\n        const urlResult = await getFileBlobUrl(fileHandle)\n        setUrl(urlResult)\n    }\n    \n    return (\n        <Contianer>\n            {url ?\n                <img src={url} height=\"100px\" width=\"100px\"/>\n            : null}\n        </Contianer>\n    )\n}","import React, { useEffect, useState } from \"react\"\nimport styled from \"styled-components\"\nimport Editor from '@monaco-editor/react';\nimport { getTextFileContents } from \"../../utils/file-system-utils\";\nimport ts from \"typescript\"\n\nconst Contianer = styled.div`\n    width: 100%;\n    height: auto;\n    border: 1px solid black;\n    border-radius: 10px;\n`\n\ninterface props {\n    fileHandle: FileSystemFileHandle;\n}\n\nexport const TextFileViewer: React.FC<props> = ({fileHandle}) => {\n    const [text, setText] = useState<string>('')\n\n    useEffect(() => {\n        fileTextToState(fileHandle)\n    }, [fileHandle])\n\n    const fileTextToState = async (fileHandle: FileSystemFileHandle) => {\n        const fileText = await getTextFileContents(fileHandle)\n        setText(fileText)\n        debugger;\n        const test = ts.createSourceFile('boo.txt', fileText, ts.ScriptTarget.JSON)\n        debugger\n        console.log('test', test)\n        // crazy AST parsed from text\n        //need to test turning back to a file\n        // then understand any and modify it\n    }\n    \n    return (\n        <Contianer>\n            {text ?\n                <Editor height=\"98vh\" value={text} />\n            : null}\n            {/* no language=\"anything\", gives basic default text editor, should use primarily at first */}\n        </Contianer>\n    )\n}","import React, { useEffect, useState } from \"react\"\nimport styled from \"styled-components\"\nimport { getVideoData, VideoData } from \"../../utils/file-system-utils\";\n\nconst Contianer = styled.div`\n    /* display: flex;\n    justify-content: center;\n    align-items: center; */\n    padding: 10% 0 0 10%;\n\n    width: 100%;\n    height: auto;\n    \n    border: 1px solid black;\n    border-radius: 10px;\n`\n\ninterface props {\n    fileHandle: FileSystemFileHandle;\n}\n\nexport const VideoFileViewer: React.FC<props> = ({fileHandle}) => {\n    const [data, setData] = useState<VideoData | undefined>(undefined)\n\n    useEffect(() => {\n        fileToUrlState(fileHandle)\n    }, [fileHandle])\n\n    const fileToUrlState = async (fileHandle: FileSystemFileHandle) => {\n        const dataResult = await getVideoData(fileHandle)\n        setData(dataResult)\n    }\n\n    return (\n        <Contianer>\n            {data ?\n                <video width=\"auto\" height=\"auto\" controls>\n                    <source src={data.blobUrl} type={data.type} />\n                </video>\n            : null}\n        </Contianer>\n    )\n}","import React from 'react'\nimport { getFileExtensionFromHandle } from '../utils/filetype-utils'\nimport { ImageFileViewer } from './FileViewers/ImageFileViewer'\nimport { TextFileViewer } from './FileViewers/TextFileViewer'\nimport { VideoFileViewer } from './FileViewers/VideoFileViewer'\n\ninterface props {\n    fileHandle: FileSystemFileHandle;\n}\n\nexport const FileViewerByType: React.FC<props> = ({fileHandle}) => {\n    const type = getFileExtensionFromHandle(fileHandle)\n\n    if(type === 'image'){\n        return <ImageFileViewer fileHandle={fileHandle} />\n    }\n    else if(type === 'video'){\n        return <VideoFileViewer fileHandle={fileHandle} />\n    }\n    else if(type === 'text'){\n        return <TextFileViewer fileHandle={fileHandle} />\n    }\n    return <div>no file worky</div>\n}","import React from 'react'\nimport styled from 'styled-components'\nimport {\n    Menu,\n    MenuItem,\n    MenuButton,\n    SubMenu\n} from '@szhsin/react-menu';\n\nimport '@szhsin/react-menu/dist/index.css';\n\nconst FileMenuContainer = styled.div`\n    height: 5%;\n    border: 2px solid darkgray;\n`\n\ninterface props {\n    setAltRootHandle?: any;\n}\n\nexport const FileMenu: React.FC<props> = ({setAltRootHandle}) => {\n    const showFolderPicker = async () => {\n        const handle = await window.showDirectoryPicker()\n        setAltRootHandle(handle)\n    }\n    \n    return (\n        <FileMenuContainer>\n            <Menu menuButton={<MenuButton>File</MenuButton>}>\n                <MenuItem onClick={showFolderPicker}>\n                    Open new root folder\n                </MenuItem>\n                {/* <MenuItem>New File</MenuItem>\n                <SubMenu label=\"Open\">\n                    <MenuItem>index.html</MenuItem>\n                    <MenuItem>example.js</MenuItem>\n                    <MenuItem>about.css</MenuItem>\n                </SubMenu>\n                <MenuItem>Save</MenuItem> */}\n            </Menu>\n        </FileMenuContainer>\n    )\n}","import React, { ReactChildren } from 'react'\n\nimport styled from 'styled-components'\n\nconst ModalBackdrop = styled.div`\n  /* display: none;  */\n  position: fixed; /* Stay in place */\n  z-index: 20; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n`\n\nconst ModalBody = styled.div`\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n`\ninterface props {\n    children: any,\n    onCloseModal: any,\n}\n\nexport const ModalReady: React.FC<props> = ({ children, onCloseModal }) => {\n\n    const preventCloseModal = (e: any) => {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    return (\n        <ModalBackdrop className=\"modal-backdrop\" onClick={onCloseModal}>\n            <ModalBody onClick={preventCloseModal}>\n                { children }\n            </ModalBody>\n        </ModalBackdrop>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport {\n    Menu,\n    Item,\n    Separator,\n    Submenu,\n} from \"react-contexify\";\nimport \"react-contexify/dist/ReactContexify.css\";\nimport { FOLDER_MENU_ID } from './directoryContents/enums';\n\nimport { ModalReady } from './ModalReady';\nimport { DirectoryCreator } from './modals/DirectoryCreator';\nimport { FileCreator } from './modals/FileCreator';\n\nimport { useTodoStore } from '../stores/selectedStore';\n\nenum Actions {\n    NewFolder = \"new-folder\",\n    NewFile = \"new-file\",\n} \n\nexport const FolderContextMenu = () => {\n    const [ directoryHandle, setDirectoryHandle ] = useState<FileSystemDirectoryHandle | undefined>(undefined)\n    const [ createFileModalOpen, setCreateFileModalOpen ] = useState<boolean>(false)\n    const [ createDirectoryModalOpen, setCreateDirectoryModalOpen ] = useState<boolean>(false)\n    const setContextHighlightFolder = useTodoStore(state => state.setContextHighlightFolder)\n\n    const handleItemClick = ({ event, props, triggerEvent, data, action } : any) => {\n        console.log({event, props, triggerEvent, data, action} );\n        const folderHandle: FileSystemDirectoryHandle = props?.folderHandle; // passed from ItemMenu.tsx\n        \n        setDirectoryHandle(folderHandle)\n\n        if(action === Actions.NewFolder) {\n            setCreateDirectoryModalOpen(true)\n        }\n        else if(action === Actions.NewFile) {\n            setCreateFileModalOpen(true)\n        }\n    }\n\n    const onCloseMenu = () => {\n        setContextHighlightFolder(undefined)\n    }\n\n    const onCloseModal = () => {\n        setDirectoryHandle(undefined)\n        setCreateFileModalOpen(false)\n        setCreateDirectoryModalOpen(false)\n    }\n\n\n    \n    return (\n        <>\n            <Menu id={FOLDER_MENU_ID} onHidden={onCloseMenu}>\n                <Item onClick={(obj) => handleItemClick({...obj, action: Actions.NewFolder})}>\n                    New Directory\n                </Item>\n                <Item onClick={(obj) => handleItemClick({...obj, action: Actions.NewFile})}>\n                    New File\n                </Item>\n                <Separator />\n                <Item disabled>Disabled</Item>\n                <Separator />\n                <Submenu label=\"Submenu\">\n                <Item onClick={handleItemClick}>\n                    Sub Item 1\n                </Item>\n                <Item onClick={handleItemClick}>Sub Item 2</Item>\n                </Submenu>\n            </Menu>\n            \n            { (createDirectoryModalOpen && directoryHandle) && (\n                <ModalReady onCloseModal={onCloseModal}>\n                    <DirectoryCreator \n                        directoryHandle={directoryHandle}\n                        setCreateDirectoryModalOpen={setCreateDirectoryModalOpen}\n                    />\n                </ModalReady>\n            )}\n\n            { (createFileModalOpen && directoryHandle) && (\n                <ModalReady onCloseModal={onCloseModal}>\n                    <FileCreator \n                        directoryHandle={directoryHandle}\n                        setCreateFileModalOpen={setCreateFileModalOpen}\n                    />\n                </ModalReady>\n            )}\n        </>\n\n    )\n}","import React, { useEffect, useRef } from 'react'\nimport { ITextInputProps } from '../types/textInputTypes';\n\nexport const TextInput: React.FC<ITextInputProps> = ({\n    name,\n    label,\n    text,\n    setText,\n    type = '',\n    error = '',\n    placeholder = '',\n    stealFocus = false,\n    onPressEnter\n}) => {\n\n    const inputRef = useRef<HTMLInputElement>();\n\n    useEffect(() => {\n        if (stealFocus && inputRef?.current) {\n            inputRef.current.focus()\n        }\n    })\n\n    const handleChange = (event: any) => {\n        setText(event.target.value);\n    }\n\n    const onEnterKey =(event:any) => {\n        if(event.key === 'Enter'){\n            onPressEnter?.()\n        }\n    }\n\n    return (\n        <div className=\"input-label-container\">\n            {label ? (\n                <label>{label}</label>\n            ) : null}\n            <input\n                name={name}\n                type={type || 'text'}\n                onChange={handleChange}\n                onKeyPress={onEnterKey}\n                value={text}\n                placeholder={placeholder}\n                ref={inputRef as any}\n            />\n            {error ? (\n                <span className=\"error\">{error}</span>\n            ) : null}\n        </div>\n    )\n}","import React from 'react'\n\ninterface props {\n    children: any,\n}\n\nexport const FormBox: React.FC<props> = ({children}) => {\n\n    return (\n        <div>\n            {children}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const SubmitButton = ({...rest}) => {    \n\n    return (\n        <button\n            {...rest}\n        >\n            Create\n        </button>\n    )\n}","import React from 'react'\n\nimport { createDirectory } from '../../utils/file-system-utils';\n\nimport { TextInput } from '../TextInput'\nimport { useState } from 'react';\nimport { FormBox } from '../FormBox';\nimport { SubmitButton } from '../SubmitButton';\n\ninterface props {\n    directoryHandle: FileSystemDirectoryHandle,\n    setCreateDirectoryModalOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DirectoryCreator: React.FC<props> = ({\n    directoryHandle,\n    setCreateDirectoryModalOpen\n}) => { \n    const [directoryName, setDirectoryName] = useState(\"\")\n\n    const cleanup = () => {\n        setCreateDirectoryModalOpen(false)\n    }\n\n    const handleCreateDirectory = () => {\n        if (directoryName){\n            createDirectory(directoryHandle, directoryName)\n            cleanup()    \n        }\n    }\n\n    return (\n        <FormBox >\n            <p>\n                Add new directory to \"{directoryHandle.name}\"\n            </p>\n            <TextInput\n                label=\"New Directory Name\"\n                name=\"directory-name\"\n                text={directoryName}\n                setText={setDirectoryName}\n                onPressEnter={handleCreateDirectory}\n                stealFocus\n            />\n            <SubmitButton\n                onClick={handleCreateDirectory}\n            >\n                Create\n            </SubmitButton>\n        </FormBox>\n    )\n}","import React, { useState } from 'react'\n\nimport { createFileInDirectory } from '../../utils/file-system-utils';\nimport { FormBox } from '../FormBox';\nimport { SubmitButton } from '../SubmitButton';\n\nimport { TextInput } from '../TextInput'\n\ninterface props {\n    directoryHandle: FileSystemDirectoryHandle,\n    setCreateFileModalOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const FileCreator: React.FC<props> = ({\n    directoryHandle,\n    setCreateFileModalOpen\n}) => { \n    const [fileNameText, setfileNameText] = useState(\"\")\n\n    const cleanup = () => {\n        setCreateFileModalOpen(false)\n    }\n\n    const handleCreateFile = async  () => {\n        if(fileNameText){\n            await createFileInDirectory(directoryHandle, fileNameText)\n            cleanup()    \n        }\n    }\n\n    return (\n        <FormBox>\n            <p>\n                Add new file to \"{directoryHandle.name}\"\n            </p>\n            <TextInput\n                label=\"New File Name and extension\"\n                name=\"file-name\"\n                text={fileNameText}\n                setText={setfileNameText}\n                onPressEnter={handleCreateFile}\n                stealFocus\n            />\n            <SubmitButton\n                onClick={handleCreateFile}\n            >\n                Create\n            </SubmitButton>\n        </FormBox>\n    )\n}","import React, { useState } from 'react'\nimport {\n    Menu,\n    Item,\n} from \"react-contexify\";\nimport \"react-contexify/dist/ReactContexify.css\";\nimport { FILE_MENU_ID } from './directoryContents/enums';\n// import { useTodoStore } from '../stores/selectedStore';\n\nenum Actions {\n    EditAstTest = \"edit-ast-test\",\n    Properties = \"properties\"\n} \n\nexport const FileContextMenu = () => {\n    const [ fileHandle, setFileHandle ] = useState<FileSystemFileHandle | undefined>(undefined)\n    // const setContextHighlightFile = useTodoStore(state => state.setContextHighlightFile)\n\n    const handleItemClick = ({ event, props, triggerEvent, data, action } : any) => {\n        console.log({event, props, triggerEvent, data, action} );\n        const fileHandle: FileSystemFileHandle = props?.fileHandle; // passed from ItemMenu.tsx\n        \n        setFileHandle(fileHandle)\n\n        if(action === Actions.EditAstTest) {\n            debugger;\n        } else if(action === Actions.Properties) {\n            debugger;\n        }\n    }\n\n    const onCloseMenu = () => {\n        setFileHandle(undefined)\n    }\n    \n    return (\n        <>\n            <Menu id={FILE_MENU_ID} onHidden={onCloseMenu}>\n                <Item onClick={(obj) => handleItemClick({...obj, action: Actions.EditAstTest})}>\n                    Edit AST test\n                </Item>\n                <Item onClick={(obj) => handleItemClick({...obj, action: Actions.Properties})}>\n                    Properties\n                </Item>\n            </Menu>\n        </>\n    )\n}","import React, { useCallback, useState } from \"react\"\nimport { DirectoryContents } from \"../components/directoryContents/DirectoryContents\"\nimport styled from \"styled-components\"\nimport { FileViewerByType } from \"../components/FileViewerByType\"\nimport { FileMenu } from \"../components/FileMenu\"\nimport { FolderContextMenu } from \"../components/FolderContextMenu\"\nimport { FileContextMenu } from \"../components/FileContextMenu\"\n\nconst FileExplorerContainer = styled.div`\n    height: 100vh;\n`\n\nconst InnerStuffContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    height: 95%;\n`\n\nexport const FileExplorer: React.FC<any> = () => {\n    const [altRootHandle, setAltRootHandle] = useState<FileSystemDirectoryHandle| undefined>(undefined)\n\n    const [selectedFile, setSelectedFile] = useState<FileSystemHandle| undefined>(undefined)\n\n    const handleSelectFileCustom = useCallback(async (file: FileSystemFileHandle) => {\n        console.log({customFileFn:file})\n        setSelectedFile(file)\n    }, [])\n\n    return (\n        <FileExplorerContainer>\n            <FileMenu setAltRootHandle={setAltRootHandle} />\n            <InnerStuffContainer>\n                <DirectoryContents //needs memoized when sober\n                    handleSelectFile={handleSelectFileCustom}\n                    altRootHandle={altRootHandle}\n                /> \n                {/* move condition into component */}\n                {selectedFile && <FileViewerByType fileHandle={selectedFile as FileSystemFileHandle} />}\n            </InnerStuffContainer>\n\n            <FolderContextMenu />\n            <FileContextMenu />\n        </FileExplorerContainer>\n    )\n}","import React from 'react';\nimport './App.css';\n\nimport {useRoutes} from 'hookrouter';\nimport { ShowSaveFilePicker } from './pages/ShowSaveFilePicker';\nimport { ShowOpenFilePicker } from './pages/ShowOpenFilePicker';\nimport { FourOhFour } from './pages/FourOhFour';\nimport { HomePage } from './pages/HomePage';\nimport { ShowDirectoryPicker } from './pages/ShowDirectoryPicker';\nimport { Layout } from './pages/Layout';\nimport { FileExplorer } from './projects/FileExplorer';\n\nconst routes = {\n    '/test': () => <ShowDirectoryPicker />,\n    '/': () => <FileExplorer />\n};\n\t\nconst App = () => {\n    const routeResult = useRoutes(routes);\n    \n    return <Layout>{routeResult}</Layout> || <FourOhFour />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 39;"],"sourceRoot":""}